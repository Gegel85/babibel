class Sound {
public:
	enum SoundState {
		Stopped,
		Paused,
		Playing,
	};

	Sound();
	void playBuffer(const std::vector<unsigned char> &buffer);
	void playStream(const std::istream &stream);
	SoundState getState();
	void stop();
	void pause();
	void play();
}

class AudioDecoder : public std::istream {
public:
	AudioDecoder(const std::istream &stream);
}

class AudioEncoder : public std::ostream {
public:
	AudioEncoder(const std::ostream &stream);
}

template<typename type>
struct Vector2 {
	type x;
	type y;
}

class GUIScreen {
public:
	GUIScreen(Vector2<unsigned int> size);

	Vector2<unsigned int> getSize();
	std::vector<Widget> getWidgets();
	Widget &getWidget(unsigned int id);
	void setFullscreen(bool fullscreen = true);
	void setSize(Vector2<unsigned int> size);
	unsigned int addWidget(std::shared_ptr<Widget> widget);
}

class Widget {
protected:
	Vector2<unsigned> _size;
	Vector2<unsigned> _pos;
	bool _enabled = true;
	bool _visible = true;

public:
	Widget(Vector2<unsigned> position = {0, 0}, Vector2<unsigned> size = {0, 0});
	void setVisible(bool visible);
	void setEnabled(bool enabled);
	void setSize(Vector2<unsigned> size);
	void setPosition(Vector2<unsigned> position);
	bool getVisible() const;
	bool getEnabled() const;
	Vector2<unsigned> getSize() const;
	Vector2<unsigned> getPosition() const;
	virtual void draw(GUIScreen &screen) = 0;
}

class Picture : public Widget {
protected:
	const std::string &path;

public:
	Picture(const std::string &path);
}

class Button : public Widget {
protected:
	std::string _text;

public:
	Button(const std::string &text = "", Vector2<unsigned> position = {0, 0}, Vector2<unsigned> size = {0, 0});
	void setText(const std::string &text);
	std::string getText() const;
	bool isClicked();
};

class TextBox : public Widget {
protected:
	std::string _text;

public:
	TextBox(const std::string &text = "", Vector2<unsigned> position = {0, 0}, Vector2<unsigned> size = {0, 0});
	void setText(const std::string &text);
	std::string getText() const;
}

class TypingBox : public Widget {
protected:
	std::string _text;

public:
	TypingBox(const std::string &text = "", Vector2<unsigned> position = {0, 0}, Vector2<unsigned> size = {0, 0});
	void setText(const std::string &text);
	std::string getText() const;
};

class ScrollBar : public Widget {
protected:
	unsigned _maxValue;
	unsigned _frameSize;

public:
	ScrollBar(Vector2<unsigned> position = {0, 0}, Vector2<unsigned> size = {0, 0});
	void setMaxValue(unsigned maxValue);
	void setFrameSize(unsigned frameSize);
	double getValue();
};
